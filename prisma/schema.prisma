generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model news {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String        @db.VarChar(255)
  summary      String        @db.VarChar(255)
  category     String        @db.VarChar(50)
  publisher_id String?       @db.Uuid
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  updated_at   DateTime      @default(now()) @db.Timestamp(6)
  publisher    publisher?    @relation(fields: [publisher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  translation  translation[]
}

model publisher {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  image       String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  news        news[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  url         url[]
}

model translation {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  news_id         String?  @db.Uuid
  language        String   @db.VarChar(50)
  translated_text String   @db.VarChar(255)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  news            news?    @relation(fields: [news_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model url {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url          String     @db.VarChar(255)
  publisher_id String?    @db.Uuid
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  updated_at   DateTime   @default(now()) @db.Timestamp(6)
  publisher    publisher? @relation(fields: [publisher_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String      @unique @db.VarChar(255)
  firstName   String?     @db.VarChar(255)
  lastName    String?     @db.VarChar(255)
  roq_user_id String      @db.VarChar(255)
  tenant_id   String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  publisher   publisher[]
}
